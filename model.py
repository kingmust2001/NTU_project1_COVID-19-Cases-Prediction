# -*- coding: utf-8 -*-
"""project 1 COVID-19 Cases Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zrBHeWm9SRUCLjb0Sc5apg_JAStcVZ2R

## **Pytorch**

### **Download data from google links**

"""data preprocessing"""
import csv
import os
import pandas as pd 
import numpy as np
"""pytorch"""
import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader

"""visualization"""
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure

"""fix pytorch framework seed"""
seed = 1214
torch.backends.cudnn.deterministic = True #fix algorithm avoid output different
torch.backends.cudnn.benchmark = False #do not need to spend extra time to search best convolution algorithm in each layer
np.random.seed(seed)
torch.manual_seed(seed)
if torch.cuda.is_available():
  torch.cuda.manual_seed_all(seed) #fix all GPU seed

print(torch.__version__)


"""### **Deep Neural Network**

NeuralNet is an nn.Module designed for regression. **The DNN consists of 2 fully-connected layers with ReLU activation.** This module also included a function cal_loss for calculating loss.
"""

class Neural_covid19(nn.Module):
  def __init__(self, input_dim):
    super(Neural_covid19, self).__init__()

    self.net = nn.Sequential(
        nn.Linear(input_dim, 64),
        nn.ReLU(),
        nn.Linear(64, 1)
    )
    # Mean squared error loss
    self.criteria = nn.MSELoss(reduction="mean")  #reduction (string, optional) ??Specifies the reduction to apply to the output: 'none' | 'mean' | 'sum'.'mean': the sum of the output will be divided by the number of elements in the output

  def forward(self, x): #Compute output of your NN
  #''' Given input of size (batch_size x input_dim), compute output of the network '''
    return self.net(x).squeeze(1)
  
  def cal_loss(self, pred, target):
    return self.criteria(pred, target)

